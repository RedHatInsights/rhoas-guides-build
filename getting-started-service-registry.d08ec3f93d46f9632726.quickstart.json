{"apiVersion":"console.openshift.io/v1","kind":"QuickStarts","metadata":{"name":"getting-started-service-registry","annotations":{"draft":true,"order":1}},"spec":{"version":0.1,"type":{"text":"Quick start","color":"green"},"displayName":"Getting Started with OpenShift Service Registry","durationMinutes":10,"icon":"","description":"<div id=\"description\" class=\"paragraph\">\n<p>Learn how to create and set up your first Service Registry instance in OpenShift Service Registry.</p>\n</div>","prerequisites":["A Red Hat identity","Access to the Red Hat OpenShift Service Registry environment at https://console.redhat.com"],"introduction":"<div id=\"introduction\" class=\"paragraph\">\n<p>Welcome to the quick start for OpenShift Service Registry. In this quick start, you&#8217;ll learn how to create and view a Service Registry instance, create a schema in this instance, and create a service account to connect an application or service to this instance.</p>\n</div>","tasks":["<div class=\"sect1\">\n<h2 id=\"proc-creating-service-registry-instance_getting-started-sr\">Creating a Service Registry instance</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph _abstract\">\n<p>Use the Red Hat OpenShift Streams for Apache Kafka web console to create and configure a Service Registry instance for your applications or services. A Service Registry instance is an isolated virtual tenant in a multi-tenanted deployment with its own unique instance URL and configuration to connect to producer and consumer applications.</p>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>In the Red Hat OpenShift Streams for Apache Kafka web console, go to <strong>Service Registry</strong> &gt; <strong>Service Registry Instances</strong>, and click <strong>Create Service Registry instance</strong>.</p>\n</li>\n<li>\n<p>Enter a unique <strong>Instance name</strong>, such as <code>my-service-registry-instance</code>. Optionally, you can add a longer text description for this instance.</p>\n<div class=\"imageblock screencapture\">\n<div class=\"content\">\n<img src=\"./images/configure-service-registry-instance.png\" alt=\"Image of instance configuration details in Create Service Registry instance window\">\n</div>\n<div class=\"title\">Figure 1. Create Service Registry instance details</div>\n</div>\n</li>\n<li>\n<p>Click <strong>Create</strong> to start the creation process for your Service Registry instance. The new Service Registry instance is listed in the instances table.</p>\n</li>\n<li>\n<p>When the <strong>Status</strong> is <strong>Ready</strong>, you can start using this Service Registry instance. You can use the options icon (three vertical dots) to view, connect to, or delete the instance as needed.</p>\n</li>\n</ol>\n</div>\n<div class=\"imageblock screencapture\">\n<div class=\"content\">\n<img src=\"./images/service-registry-instance-options.png\" alt=\"Image of Service Registry instance options menu\">\n</div>\n<div class=\"title\">Figure 2. Service Registry instance options menu</div>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is the new Service Registry instance listed in the instances table?</p>\n</li>\n<li>\n<p>Is the state of the new Service Registry instance shown as <strong>Ready</strong>?</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-uploading-registry-schema_getting-started-sr\">Uploading a schema to Service Registry</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph _abstract\">\n<p>After you create a Service Registry instance, you can upload schema or API content to the instance. The following example shows uploading an Apache Avro schema for serializing and deserializing Kafka messages in client applications.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You&#8217;ve created a Service Registry instance and the instance is in <strong>Ready</strong> state.</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>In the <strong>Service Registry</strong> instances page of the web console, select the Service Registry instance that you want to upload a schema to.</p>\n</li>\n<li>\n<p>Click <strong>Upload artifact</strong> and complete the form to define the schema details:</p>\n<div class=\"imageblock screencapture\">\n<div class=\"content\">\n<img src=\"./images/upload-schema.png\" alt=\"Image of form to upload a schema\">\n</div>\n<div class=\"title\">Figure 3. Guided steps to define artifact details</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Group</strong>: Enter an optional unique group name such as <code>my-org</code> to organize the artifact in a named collection. Each group contains a logically related set of schemas or API designs, typically managed by a single entity, belonging to a particular application or organization.</p>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nSpecifying a group is optional when using the web console, and a <code>default</code> group is automatically created. When using the REST API or Maven plug-in, you can specify the <code>default</code> group in the API path if you do not want to create a unique group.\n</td>\n</tr>\n</table>\n</div>\n</li>\n<li>\n<p><strong>ID</strong>: Enter an optional unique ID for this artifact such as <code>my-ID</code>. If you do not specify a unique artifact ID, Service Registry generates one automatically as a UUID.</p>\n</li>\n<li>\n<p><strong>Type</strong>: Use the default <strong>Auto-Detect</strong> setting to automatically detect the artifact type, or select the artifact type from the drop-down, for example, Avro Schema or OpenAPI.</p>\n</li>\n<li>\n<p><strong>Artifact</strong>: Drag and drop or click <strong>Browse</strong> to upload a file. For this example, copy and paste the following simple Avro schema:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n\"type\": \"record\",\n\"namespace\": \"com.example\",\n\"name\": \"FullName\",\n\"fields\": [\n{ \"name\": \"first\", \"type\": \"string\" },\n{ \"name\": \"last\", \"type\": \"string\" }\n]}</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>Click <strong>Upload</strong> to complete the operation and display the new artifact details:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Info</strong>: Displays the artifact name, group, description, lifecycle status, when created, and last modified. Click the <strong>Edit Artifact Metadata</strong> pencil icon to edit the artifact name and description or add labels, or click <strong>Download</strong> to download the artifact file locally.</p>\n</li>\n<li>\n<p><strong>Content</strong>: Displays a read-only view of the full artifact content.</p>\n</li>\n<li>\n<p><strong>Documentation</strong>: (OpenAPI only): Displays automatically-generated REST API documentation.</p>\n</li>\n<li>\n<p><strong>Content Rules</strong>: Displays artifact content rules that you can enable and configure. You can configure a <strong>Validity Rule</strong> or <strong>Compatibility Rule</strong> by selecting the appropriate rule configuration from the drop-down. For details on supported rules, see the <a href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_service_registry/1\">OpenShift Service Registry user documentation</a>.</p>\n<div class=\"paragraph\">\n<p>You can now use this schema to serialize and deserialize messages from Kafka client applications.</p>\n</div>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>On the right of the screen, you can click <strong>Upload new version</strong> to add a new artifact version.</p>\n</li>\n<li>\n<p>You can click <strong>Delete</strong> to delete an artifact as needed.</p>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Important</div>\n</td>\n<td class=\"content\">\nDeleting an artifact deletes the artifact and all of its versions, and cannot be undone. Artifact versions are immutable and cannot be deleted individually.\n</td>\n</tr>\n</table>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is the new schema in the Artifacts table?</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-connecting-registry-clients_getting-started-sr\">Connecting client applications to Service Registry</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To connect your applications or services to a Service Registry instance in the web console, you must copy and save the Service Registry instance URL, create a service account, and copy and save the generated credentials. You&#8217;ll use these details later when you configure your application for Service Registry.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You&#8217;ve created a Service Registry instance and the instance is in <strong>Ready</strong> state.</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>In the <strong>Service Registry</strong> instances page of the web console, for the instance that you want to connect to, select the options icon (three vertical dots), and click <strong>View connection information</strong>.</p>\n</li>\n<li>\n<p>Depending on the client libraries that you want to use, chose the API for your needs:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Core Registry API</strong> is the most powerful and works with Apicurio client libraries</p>\n</li>\n<li>\n<p><strong>Schema Registry compatibility API</strong> provides compatibility with the Confluent Schema Registry API</p>\n</li>\n<li>\n<p><strong>CNCF Schema Registry API</strong> provides compatibility with the CNCF specification</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>In the <strong>Connection</strong> page, copy the <strong>Core Registry API</strong> URL, or one of the other API URLs if you are using a different client, to a secure location. This is the server endpoint that you&#8217;ll need to connect to this Service Registry instance.</p>\n</li>\n<li>\n<p>In the web console left menu, go to <strong>Service Accounts</strong>, and click <strong>Create service account</strong> to generate the credentials that you can use to connect to Service Registry and Kafka instances.</p>\n</li>\n<li>\n<p>Copy the generated <strong>Client ID</strong> and <strong>Client Secret</strong> to a secure location.</p>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Important</div>\n</td>\n<td class=\"content\">\nThe generated credentials are displayed only one time. Ensure that you&#8217;ve successfully and securely saved the copied credentials before closing the credentials window.\n</td>\n</tr>\n</table>\n</div>\n</li>\n<li>\n<p>After you save the generated credentials to a secure location, select the confirmation check box in the credentials window and close the window.</p>\n<div class=\"paragraph\">\n<p>You’ll use the details that you saved to configure your applications to connect to your Service Registry instances later when you&#8217;re ready.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, if you plan to use <a href=\"https://github.com/edenhill/kafkacat\" target=\"_blank\" rel=\"noopener\">Kafkacat</a> to interact with your Kafka instance and deserialize Avro messages using Service Registry, you&#8217;ll use this information to set your Service Registry URL in the client environment variables.</p>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Did you save the Service Registry instance URL to a secure location?</p>\n</li>\n<li>\n<p>Did you save the client credentials to a secure location?</p>\n</li>\n</ul>\n</div>\n</div>\n</div>"],"conclusion":"<div id=\"conclusion\" class=\"paragraph\">\n<p>Congratulations! You successfully completed the Service Registry Getting Started quick start, and are now ready to use the service.</p>\n</div>","nextQuickStart":["service-registry-quarkus-dev"]}}