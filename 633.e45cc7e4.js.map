{"version":3,"file":"633.e45cc7e4.js","mappings":"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","sources":["webpack://guides/./src/app/quickstartLoader.tsx","webpack://guides/./src/app/procedure-parser.ts","webpack://guides/./src/app/QuickStartContainer.tsx","webpack://guides/./src/app/common/MASLoading/MASLoading.tsx","webpack://guides/./src/app/QuickStartCatalogFederated.tsx","webpack://guides/./src/app/DemoPage.tsx","webpack://guides/./src/bootstrap.tsx","webpack://guides/./src/app/index.tsx"],"sourcesContent":["import { GuidesQuickStart, ProcQuickStartParser } from \"@app/procedure-parser\";\nimport React, { useState, useEffect, FunctionComponent } from \"react\";\nimport { QuickStart } from \"@patternfly/quickstarts\";\nimport {useAssets} from \"@rhoas/app-services-ui-shared\";\n\nconst loadJSONQuickStartsFilesFromAssets = async (\n  basePath: string\n): Promise<string[]> => {\n  const data = await fetch(`${basePath}/webpack-assets.json`).then((response) =>\n    response.json()\n  );\n  const files = Array.isArray(data[\"\"][\"json\"])\n    ? data[\"\"][\"json\"]\n    : [data[\"\"][\"json\"]];\n  return files\n    .filter((url) => url.endsWith(\".quickstart.json\"))\n    .map((e) => (!e.startsWith(\"http\") ? `${basePath}/${e}` : e));\n};\n\nexport const loadJSONQuickStarts = async (\n  basePath: string,\n  showDrafts?: boolean\n) => {\n  const files = await loadJSONQuickStartsFilesFromAssets(basePath);\n  const result = [] as GuidesQuickStart[];\n  for (let i = 0; i < files.length; i++) {\n    await fetch(files[i]).then((response) =>\n      response.json().then((data) => result.push(data))\n    );\n  }\n  return result\n    .filter((qs) => {\n      if (!showDrafts && qs.metadata.annotations?.draft) {\n        return false;\n      }\n      return true;\n    })\n    .map((content) => ProcQuickStartParser(content));\n};\n\nexport interface QuickStartLoaderProps {\n  children: React.ReactNode;\n  showDrafts?: boolean;\n  onLoad: (quickStarts: QuickStart[]) => {};\n}\n\nconst QuickStartLoader: FunctionComponent = ({ showDrafts, onLoad }) => {\n  const assets = useAssets();\n  useEffect(() => {\n    const load = async () => {\n      const quickstarts = await loadJSONQuickStarts(\n        assets?.getPath() || \"\",\n        showDrafts\n      );\n      onLoad(quickstarts);\n    };\n    load();\n  }, [assets, showDrafts]);\n  return null;\n};\n\nexport default QuickStartLoader;\n","import {QuickStart, QuickStartTask} from \"@patternfly/quickstarts\";\n\nexport type GuidesQuickStart = QuickStart & {\n    metadata?: {\n        annotations?: {\n            draft?: boolean,\n            order?: number\n        }\n    }\n    spec: {\n        tasks: undefined | QuickStartTask[] | string[]\n    }\n}\n\n\nexport const ProcQuickStartParser = (\n    quickStart: GuidesQuickStart, environmentVariables?: { [name: string]: string }\n) => {\n    const replaceEnvironmentVariables = (s: string | undefined) =>\n        s?.replace(/\\${(\\w+)}/, (substring, name) => {\n            return environmentVariables ? [name]\n                ? environmentVariables[name]\n                : substring : substring;\n        });\n\n    quickStart.spec.tasks = quickStart.spec.tasks?.map((task: QuickStartTask | string, index) => {\n        let proc: string;\n        let answer: QuickStartTask;\n        if (typeof task === \"string\") {\n            proc = task;\n            answer = {};\n        } else {\n            proc = task[\"proc\"]\n            answer = task;\n            delete task[\"proc\"];\n        }\n\n        let procedure, verification, title, summaryFailed, success, reviewFailed: string | undefined;\n        let description = \"\";\n        if (proc) {\n            const taskDOM = document.createElement(\"div\");\n            taskDOM.innerHTML = proc;\n\n            // remove the screencapture images\n            taskDOM.querySelectorAll(\".imageblock.screencapture\").forEach(node => {\n                node.parentElement?.removeChild(node);\n            });\n\n            title = taskDOM.querySelector(\"h1:first-child,h2:first-child,h3:first-child,h4:first-child,h5:first-child\")?.innerHTML.trim();\n            let sectionBody = taskDOM.querySelector(\".sectionbody\");\n            if (!sectionBody?.hasChildNodes()) {\n                // possibly in other templates, where we want to look for article\n                sectionBody = taskDOM.querySelector(\"article\");\n            }\n            if (sectionBody) {\n                for (let i = 0; i < sectionBody.children.length || 0; i++) {\n                    const child = sectionBody.children.item(i);\n                    // find the title\n                    const title = child?.querySelector(\".heading,.title\");\n                    if (title) {\n                        switch (title?.textContent?.trim()) {\n                            case \"Procedure\":\n                                procedure = child?.querySelector(\":not(.heading):not(.title)\")?.outerHTML.trim();\n                                break;\n                            case \"Verification\":\n                                verification = child?.querySelector(\":not(.heading):not(.title)\")?.outerHTML.trim();\n                                break;\n                        }\n                    } else if (!procedure) {\n                        // Otherwise if it comes before a procedure it's part of the description\n                        description += child?.innerHTML.trim();\n                    }\n                }\n            }\n            success = taskDOM.querySelector(\".qs-summary.success\")?.innerHTML.trim();\n            reviewFailed = taskDOM.querySelector(\".qs-review.failed\")?.innerHTML.trim();\n            summaryFailed = taskDOM.querySelector(\".qs-summary.failed\")?.innerHTML.trim();\n        }\n\n\n        answer.title = replaceEnvironmentVariables(answer.title || title)\n        answer.description = replaceEnvironmentVariables(answer.description || `${description} ${procedure}`);\n        answer.review = answer.review || {};\n        answer.review.instructions = replaceEnvironmentVariables(answer.review?.instructions || verification || \"Have you completed these steps?\")\n        answer.review.failedTaskHelp = replaceEnvironmentVariables(answer.review.failedTaskHelp || reviewFailed || \"This task isn’t verified yet. Try the task again.\");\n        answer.summary = answer.summary || {};\n        answer.summary.success = replaceEnvironmentVariables(answer.summary.success ||\n            success\n            || \"You have completed this task!\");\n        answer.summary.failed = replaceEnvironmentVariables(answer.summary.failed || summaryFailed\n            || \"Try the steps again.\");\n        return answer;\n    });\n    return quickStart;\n};\n","import React, { useState, useEffect, FunctionComponent } from \"react\";\nimport {\n  QuickStartContainer as PfQuickStartContainer,\n  useLocalStorage,\n} from \"@patternfly/quickstarts\";\nimport { loadJSONQuickStarts } from \"@app/quickstartLoader\";\nimport {useAssets} from \"@rhoas/app-services-ui-shared\";\n\nexport interface QuickStartContainerProps\n  extends React.HTMLProps<HTMLDivElement> {\n  showDrafts?: boolean;\n}\n\nconst QuickStartContainer: FunctionComponent<QuickStartContainerProps> = ({\n  children,\n  showDrafts\n}) => {\n  const [activeQuickStartID, setActiveQuickStartID] = useLocalStorage(\n    \"quickstartId\",\n    \"\"\n  );\n  const [allQuickStartStates, setAllQuickStartStates] = useLocalStorage(\n    \"quickstarts\",\n    {}\n  );\n\n  const [allQuickStartsLoaded, setAllQuickStartsLoaded] = useState<boolean>(false);\n  const [allQuickStarts, setAllQuickStarts] = useState<any[]>([]);\n\n  const assets = useAssets();\n\n  useEffect(() => {\n    const load = async () => {\n      const quickstarts = await loadJSONQuickStarts(assets?.getPath() || \"\", showDrafts);\n      console.log(quickstarts);\n      setAllQuickStarts(quickstarts);\n      setAllQuickStartsLoaded(true);\n    };\n    load();\n  }, [assets, showDrafts]);\n\n  const drawerProps = {\n    quickStarts: allQuickStarts,\n    activeQuickStartID,\n    allQuickStartStates,\n    setActiveQuickStartID,\n    setAllQuickStartStates,\n    showCardFooters: false,\n    loading: allQuickStartsLoaded,\n  };\n\n  return (\n    <PfQuickStartContainer {...drawerProps}>\n      {children}\n    </PfQuickStartContainer>\n  );\n};\n\nexport default QuickStartContainer;","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React from \"react\";\nimport {\n  TextContent,\n  Text,\n  Divider,\n  Gallery,\n  GalleryItem,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport {\n  getQuickStartStatus,\n  QuickStartContextValues,\n  QuickStartContext,\n  QuickStartTile,\n  filterQuickStarts,\n  QuickStartCatalogEmptyState,\n  QUICKSTART_SEARCH_FILTER_KEY,\n  QuickStartCatalogFilterSearchWrapper,\n  QuickStartCatalogFilterCountWrapper,\n  QuickStartCatalog,\n  QuickStartCatalogSection,\n  QuickStartCatalogHeader,\n  QuickStartCatalogToolbar,\n  clearFilterParams,\n} from \"@patternfly/quickstarts\";\nimport {MASLoading} from \"@app/common\";\nimport { GuidesQuickStart } from \"./procedure-parser\";\nimport \"./Catalog.css\";\n\nconst MasQuickStartCatalog: React.FC = () => {\n  const {\n    activeQuickStartID,\n    allQuickStartStates,\n    allQuickStarts,\n    filter,\n    setFilter,\n  } = React.useContext<QuickStartContextValues>(QuickStartContext);\n\n  const initialQueryParams = new URLSearchParams(window.location.search);\n  const initialSearchQuery =\n    initialQueryParams.get(QUICKSTART_SEARCH_FILTER_KEY) || \"\";\n\n  const sortFnc = (q1: GuidesQuickStart, q2: GuidesQuickStart) => {\n    const q1Order = q1.metadata.annotations?.order;\n    const q2Order = q2.metadata.annotations?.order;\n    if (q1Order && !q2Order) {\n      return -1;\n    } else if (!q1Order && q2Order) {\n      return 1;\n    } else if (!q1Order && !q2Order) {\n      return q1.spec.displayName.localeCompare(q2.spec.displayName);\n    } else if (q1Order && q2Order) {\n      return q1Order - q2Order;\n    }\n    return 0;\n  };\n\n  const initialFilteredQuickStarts = filterQuickStarts(\n    allQuickStarts,\n    initialSearchQuery,\n    [],\n    allQuickStartStates\n  ).sort(sortFnc);\n\n  const [filteredQuickStarts, setFilteredQuickStarts] = React.useState<\n    GuidesQuickStart[]\n  >(initialFilteredQuickStarts);\n\n  React.useEffect(() => {\n    const filteredQs = filterQuickStarts(\n      allQuickStarts,\n      filter.keyword,\n      [],\n      allQuickStartStates\n    ).sort(sortFnc);\n    if (filteredQs.length !== filteredQuickStarts.length) {\n      setFilteredQuickStarts(filteredQs);\n    }\n  }, [allQuickStarts, filter, allQuickStartStates, setFilteredQuickStarts]);\n\n  const onSearchInputChange = (searchValue: string) => {\n    const result = filterQuickStarts(\n      allQuickStarts,\n      searchValue,\n      [],\n      allQuickStartStates\n    ).sort(sortFnc);\n    if (result.length !== filteredQuickStarts.length) {\n      setFilteredQuickStarts(result);\n    }\n  };\n\n  const CatalogWithSections = (\n    <>\n      <QuickStartCatalogSection>\n        <TextContent>\n          <Text component=\"h2\">Quick starts</Text>\n          <Text component=\"p\" className=\"mk-catalog-sub\">\n            Step-by-step instructions and tasks\n          </Text>\n        </TextContent>\n        <Gallery className=\"pfext-quick-start-catalog__gallery\" hasGutter>\n          {allQuickStarts\n            .filter(\n              (quickStart) =>\n                !quickStart.spec.type ||\n                quickStart.spec.type.text !== \"Documentation\"\n            )\n            .sort(sortFnc)\n            .map((quickStart) => {\n              const {\n                metadata: { name: id },\n              } = quickStart;\n\n              return (\n                <GalleryItem\n                  key={id}\n                  className=\"pfext-quick-start-catalog__gallery-item\"\n                >\n                  <QuickStartTile\n                    quickStart={quickStart}\n                    isActive={id === activeQuickStartID}\n                    status={getQuickStartStatus(allQuickStartStates, id)}\n                  />\n                </GalleryItem>\n              );\n            })}\n        </Gallery>\n      </QuickStartCatalogSection>\n      <QuickStartCatalogSection>\n        <Divider />\n      </QuickStartCatalogSection>\n      <QuickStartCatalogSection>\n        <TextContent>\n          <Text component=\"h2\">Documentation</Text>\n          <Text component=\"p\" className=\"mk-catalog-sub\">\n            Technical information for using the service\n          </Text>\n        </TextContent>\n        <Gallery className=\"pfext-quick-start-catalog__gallery\" hasGutter>\n          {allQuickStarts\n            .filter(\n              (quickStart) => quickStart.spec.type?.text === \"Documentation\"\n            )\n            .sort(sortFnc)\n            .map((quickStart) => {\n              const {\n                metadata: { name: id },\n              } = quickStart;\n\n              return (\n                <GalleryItem\n                  key={id}\n                  className=\"pfext-quick-start-catalog__gallery-item\"\n                >\n                  <QuickStartTile\n                    quickStart={quickStart}\n                    isActive={id === activeQuickStartID}\n                    status={getQuickStartStatus(allQuickStartStates, id)}\n                  />\n                </GalleryItem>\n              );\n            })}\n        </Gallery>\n      </QuickStartCatalogSection>\n    </>\n  );\n\n  const clearFilters = () => {\n    setFilter(\"keyword\", \"\");\n    clearFilterParams();\n    setFilteredQuickStarts(allQuickStarts.sort(sortFnc));\n  };\n\n  if (allQuickStarts.length === 0) {\n    return <MASLoading />;\n  }\n\n  return (\n    <>\n      <QuickStartCatalogHeader title=\"Resources\" />\n      <Divider component=\"div\" />\n      <QuickStartCatalogToolbar>\n        <ToolbarContent>\n          <QuickStartCatalogFilterSearchWrapper\n            onSearchInputChange={onSearchInputChange}\n          />\n          <QuickStartCatalogFilterCountWrapper\n            quickStartsCount={filteredQuickStarts.length}\n          />\n        </ToolbarContent>\n      </QuickStartCatalogToolbar>\n      <Divider component=\"div\" />\n      {filteredQuickStarts.length === 0 ? (\n        <QuickStartCatalogEmptyState clearFilters={clearFilters} />\n      ) : filteredQuickStarts.length !== allQuickStarts.length ? (\n        <QuickStartCatalog quickStarts={filteredQuickStarts} />\n      ) : (\n        CatalogWithSections\n      )}\n    </>\n  );\n};\n\nexport default MasQuickStartCatalog;\n","// @ts-nocheck\nimport React from \"react\";\nimport {\n  Page,\n  Nav,\n  NavList,\n  NavItem,\n  PageSidebar,\n  PageHeader,\n} from \"@patternfly/react-core\";\nimport QuickStartCatalogFederated from \"@app/QuickStartCatalogFederated\";\n\nconst DemoPage: React.FunctionComponent = () => {\n  const AppHeader = (\n    <PageHeader\n      logo={<div>Quick starts for MAS</div>}\n      showNavToggle\n      isNavOpen\n    />\n  );\n\n  const AppNav = (\n    <Nav aria-label=\"Nav\">\n      <NavList>\n        <NavItem to=\"/\">Home</NavItem>\n      </NavList>\n    </Nav>\n  );\n\n  const AppSidebar = <PageSidebar isNavOpen nav={AppNav} />;\n\n  return (\n    <Page header={AppHeader} sidebar={AppSidebar} isManagedSidebar>\n      <QuickStartCatalogFederated />\n    </Page>\n  );\n};\n\nexport default DemoPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from './app';\nimport '@patternfly/patternfly/patternfly.css';\nimport '@patternfly/patternfly/patternfly-addons.css';\nimport \"@patternfly/quickstarts/dist/quickstarts.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import * as React from 'react';\nimport QuickStartContainer from './QuickStartContainer';\nimport DemoPage from './DemoPage';\n\nconst App = () => (\n  <QuickStartContainer>\n    <DemoPage />\n  </QuickStartContainer>\n);\n\nexport { App };\n"],"names":["loadJSONQuickStartsFilesFromAssets","basePath","Promise","fetch","then","response","json","data","Array","isArray","filter","url","endsWith","map","e","startsWith","loadJSONQuickStarts","showDrafts","files","result","i","length","push","qs","metadata","annotations","draft","content","quickStart","environmentVariables","replaceEnvironmentVariables","s","replace","substring","name","spec","tasks","task","index","proc","answer","procedure","verification","title","summaryFailed","success","reviewFailed","description","taskDOM","document","createElement","innerHTML","querySelectorAll","forEach","node","parentElement","removeChild","querySelector","trim","sectionBody","hasChildNodes","children","child","item","textContent","outerHTML","review","instructions","failedTaskHelp","summary","failed","ProcQuickStartParser","useLocalStorage","activeQuickStartID","setActiveQuickStartID","allQuickStartStates","setAllQuickStartStates","useState","allQuickStartsLoaded","setAllQuickStartsLoaded","allQuickStarts","setAllQuickStarts","assets","useAssets","useEffect","getPath","quickstarts","console","log","drawerProps","quickStarts","showCardFooters","loading","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","QuickStartContext","setFilter","initialSearchQuery","URLSearchParams","window","location","search","get","QUICKSTART_SEARCH_FILTER_KEY","sortFnc","q1","q2","q1Order","order","q2Order","displayName","localeCompare","initialFilteredQuickStarts","filterQuickStarts","sort","filteredQuickStarts","setFilteredQuickStarts","filteredQs","keyword","CatalogWithSections","QuickStartCatalogSection","TextContent","Text","component","className","Gallery","hasGutter","type","text","id","GalleryItem","key","QuickStartTile","isActive","status","getQuickStartStatus","Divider","QuickStartCatalogHeader","QuickStartCatalogToolbar","ToolbarContent","QuickStartCatalogFilterSearchWrapper","onSearchInputChange","searchValue","QuickStartCatalogFilterCountWrapper","quickStartsCount","QuickStartCatalogEmptyState","clearFilters","clearFilterParams","QuickStartCatalog","AppHeader","PageHeader","logo","showNavToggle","isNavOpen","AppNav","Nav","NavList","NavItem","to","AppSidebar","PageSidebar","nav","Page","header","sidebar","isManagedSidebar","QuickStartCatalogFederated","getElementById"],"sourceRoot":""}