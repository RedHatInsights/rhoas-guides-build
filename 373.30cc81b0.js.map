{"version":3,"sources":["webpack://guides/./src/app/QuickStartCatalogFederated.tsx"],"names":["MasQuickStartCatalog","quickStarts","QuickStartContext","activeQuickStartID","allQuickStartStates","initialQueryParams","URLSearchParams","window","location","search","initialSearchQuery","get","QUICKSTART_SEARCH_FILTER_KEY","setSearchInputText","initialStatusFilters","QUICKSTART_STATUS_FILTER_KEY","split","statusFilters","initialFilteredQuickStarts","filterQuickStarts","sort","q1","q2","spec","displayName","localeCompare","filteredQuickStarts","setFilteredQuickStarts","CatalogWithSections","getQuickStartStatusCount","PageSection","TextContent","Text","component","Gallery","className","hasGutter","filter","quickStart","type","text","map","id","GalleryItem","key","QuickStartTile","isActive","status","getQuickStartStatus","Divider","variant","PageSectionVariants","padding","default","Toolbar","usePageInsets","ToolbarContent","QuickStartCatalogFilterSearchWrapper","onSearchInputChange","searchValue","result","QuickStartCatalogFilterCountWrapper","quickStartsCount","length","QuickStartCatalogEmptyState","clearFilters","clearQuickStartFilters","QuickStartCatalog","QuickStartsLoader","loaded","LoadingBox"],"mappings":"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","file":"373.30cc81b0.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  Divider,\n  Gallery,\n  GalleryItem,\n  Toolbar,\n  ToolbarContent,\n} from \"@patternfly/react-core\";\nimport {\n  QuickStart,\n  getQuickStartStatus,\n  QuickStartContextValues,\n  QuickStartContext,\n  QuickStartTile,\n  getQuickStartStatusCount,\n  filterQuickStarts,\n  QuickStartCatalogEmptyState,\n  QUICKSTART_SEARCH_FILTER_KEY,\n  QUICKSTART_STATUS_FILTER_KEY,\n  QuickStartCatalogFilterSearchWrapper,\n  QuickStartCatalogFilterCountWrapper,\n  clearQuickStartFilters,\n  QuickStartsLoader,\n  LoadingBox,\n  QuickStartCatalog,\n} from \"@cloudmosaic/quickstarts\";\n\ntype MasQuickStartCatalogProps = {\n  quickStarts: QuickStart[];\n};\n\nconst MasQuickStartCatalog: React.FC<MasQuickStartCatalogProps> = ({\n  quickStarts,\n}) => {\n  const {\n    activeQuickStartID,\n    allQuickStartStates,\n  } = React.useContext<QuickStartContextValues>(QuickStartContext);\n\n  const initialQueryParams = new URLSearchParams(window.location.search);\n  const initialSearchQuery =\n    initialQueryParams.get(QUICKSTART_SEARCH_FILTER_KEY) || \"\";\n  const [searchInputText, setSearchInputText] = React.useState<string>(\n    initialSearchQuery\n  );\n  const initialStatusFilters =\n    initialQueryParams.get(QUICKSTART_STATUS_FILTER_KEY)?.split(\",\") || [];\n  const [statusFilters, setStatusFilters] = React.useState<string[]>(\n    initialStatusFilters\n  );\n\n  const sortFnc = (q1: QuickStart, q2: QuickStart) =>\n    q1.spec.displayName.localeCompare(q2.spec.displayName);\n  const initialFilteredQuickStarts = filterQuickStarts(\n    quickStarts,\n    initialSearchQuery,\n    initialStatusFilters,\n    allQuickStartStates\n  ).sort(sortFnc);\n  const [filteredQuickStarts, setFilteredQuickStarts] = React.useState<\n    QuickStart[]\n  >(initialFilteredQuickStarts);\n\n  const quickStartStatusCount = React.useMemo(\n    () => getQuickStartStatusCount(allQuickStartStates, quickStarts),\n    [allQuickStartStates, quickStarts]\n  );\n  const onSearchInputChange = (searchValue: string) => {\n    const result = filterQuickStarts(\n      quickStarts,\n      searchValue,\n      statusFilters,\n      allQuickStartStates\n    ).sort((q1, q2) => q1.spec.displayName.localeCompare(q2.spec.displayName));\n    setSearchInputText(searchValue);\n    setFilteredQuickStarts(result);\n  };\n  const onStatusChange = (statusList: string[]) => {\n    const result = filterQuickStarts(\n      quickStarts,\n      searchInputText,\n      statusList,\n      allQuickStartStates\n    ).sort((q1, q2) => q1.spec.displayName.localeCompare(q2.spec.displayName));\n    setStatusFilters(statusList);\n    setFilteredQuickStarts(result);\n  };\n\n  const CatalogWithSections = (\n    <>\n      <PageSection>\n        <TextContent>\n          <Text component=\"h2\">Quick starts</Text>\n          <Text component=\"p\">Step-by-step instructions and tasks</Text>\n        </TextContent>\n        <Gallery className=\"co-quick-start-catalog__gallery\" hasGutter>\n          {quickStarts\n            .filter(\n              (quickStart) =>\n                !quickStart.spec.type ||\n                quickStart.spec.type.text !== \"Documentation\"\n            )\n            .map((quickStart) => {\n              const {\n                metadata: { name: id },\n              } = quickStart;\n\n              return (\n                <GalleryItem key={id}>\n                  <QuickStartTile\n                    quickStart={quickStart}\n                    isActive={id === activeQuickStartID}\n                    status={getQuickStartStatus(allQuickStartStates, id)}\n                  />\n                </GalleryItem>\n              );\n            })}\n        </Gallery>\n      </PageSection>\n      <PageSection>\n        <Divider />\n      </PageSection>\n      <PageSection>\n        <TextContent>\n          <Text component=\"h2\">Documentation</Text>\n          <Text component=\"p\">Technical information for using the service</Text>\n        </TextContent>\n        <Gallery className=\"co-quick-start-catalog__gallery\" hasGutter>\n          {quickStarts\n            .filter(\n              (quickStart) => quickStart.spec.type?.text === \"Documentation\"\n            )\n            .map((quickStart) => {\n              const {\n                metadata: { name: id },\n              } = quickStart;\n\n              return (\n                <GalleryItem key={id}>\n                  <QuickStartTile\n                    quickStart={quickStart}\n                    isActive={id === activeQuickStartID}\n                    status={getQuickStartStatus(allQuickStartStates, id)}\n                  />\n                </GalleryItem>\n              );\n            })}\n        </Gallery>\n      </PageSection>\n    </>\n  );\n\n  const clearFilters = () => {\n    clearQuickStartFilters();\n    setFilteredQuickStarts(\n      quickStarts.sort((q1, q2) =>\n        q1.spec.displayName.localeCompare(q2.spec.displayName)\n      )\n    );\n  };\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component=\"h1\">Resources</Text>\n        </TextContent>\n      </PageSection>\n      <Divider component=\"div\" />\n      <PageSection\n        padding={{\n          default: \"noPadding\",\n        }}\n      >\n        <Toolbar usePageInsets>\n          <ToolbarContent>\n            <QuickStartCatalogFilterSearchWrapper\n              onSearchInputChange={onSearchInputChange}\n            />\n            <QuickStartCatalogFilterCountWrapper\n              quickStartsCount={filteredQuickStarts.length}\n            />\n          </ToolbarContent>\n        </Toolbar>\n      </PageSection>\n      <Divider component=\"div\" />\n      {filteredQuickStarts.length === 0 ? (\n        <PageSection>\n          <QuickStartCatalogEmptyState clearFilters={clearFilters} />\n        </PageSection>\n      ) : filteredQuickStarts.length !== quickStarts.length ? (\n        <PageSection>\n          <QuickStartCatalog quickStarts={filteredQuickStarts} />\n        </PageSection>\n      ) : (\n        CatalogWithSections\n      )}\n    </>\n  );\n};\n\nconst QuickStartCatalogFederated: FunctionComponent = () => (\n  <QuickStartsLoader>\n    {(quickStarts: QuickStart[], loaded: boolean) =>\n      loaded ? (\n        <MasQuickStartCatalog quickStarts={quickStarts} />\n      ) : (\n        <LoadingBox />\n      )\n    }\n  </QuickStartsLoader>\n);\n\nexport default QuickStartCatalogFederated;\n"],"sourceRoot":""}