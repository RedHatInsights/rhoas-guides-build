{"version":3,"file":"555.1b43b9c9.js","mappings":"gHAeO,IAAMA,EAAuB,SAChCC,EAA8BC,G,MAExBC,EAA8B,SAACC,GACjC,OAAAA,MAAAA,OAAC,EAADA,EAAGC,QAAQ,aAAa,SAACC,EAAWC,GAChC,OAAOL,EACDA,EAAqBK,GACTD,MAuE1B,OApEAL,EAAWO,KAAKC,MAA6B,QAArB,EAAAR,EAAWO,KAAKC,aAAK,eAAEC,KAAI,SAACC,EAA+BC,G,oBAC3EC,EACAC,EAUAC,EAAWC,EAAcC,EAAOC,EAAeC,EAASC,EATxC,iBAATT,GACPE,EAAOF,EACPG,EAAS,KAETD,EAAOF,EAAW,KAClBG,EAASH,SACFA,EAAW,MAItB,IAAIU,EAAc,GAClB,GAAIR,EAAM,CACN,IAAMS,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAYZ,EAGpBS,EAAQI,iBAAiB,6BAA6BC,SAAQ,SAAAC,G,MACxC,QAAlB,EAAAA,EAAKC,qBAAa,SAAEC,YAAYF,MAGpCX,EAA2G,QAAnG,EAAAK,EAAQS,cAAc,qFAA6E,eAAEN,UAAUO,OACvH,IAAIC,EAAcX,EAAQS,cAAc,gBAKxC,IAJKE,MAAAA,OAAW,EAAXA,EAAaC,mBAEdD,EAAcX,EAAQS,cAAc,YAEpCE,EACA,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAYG,SAASC,OAAaF,IAAK,CACvD,IAAMG,EAAQL,EAAYG,SAASG,KAAKJ,GAElC,EAAQG,MAAAA,OAAK,EAALA,EAAOP,cAAc,mBACnC,GAAI,EACA,OAA0B,QAAlB,eAAK,EAAL,EAAOS,mBAAW,eAAER,QACxB,IAAK,YACDjB,EAA8D,QAAlD,EAAAuB,MAAAA,OAAK,EAALA,EAAOP,cAAc,qCAA6B,eAAEU,UAAUT,OAC1E,MACJ,IAAK,eACDhB,EAAiE,QAAlD,EAAAsB,MAAAA,OAAK,EAALA,EAAOP,cAAc,qCAA6B,eAAEU,UAAUT,YAG7EjB,IAERM,GAAeiB,MAAAA,OAAK,EAALA,EAAOb,UAAUO,QAI5Cb,EAAsD,QAA5C,EAAAG,EAAQS,cAAc,8BAAsB,eAAEN,UAAUO,OAClEZ,EAAyD,QAA1C,EAAAE,EAAQS,cAAc,4BAAoB,eAAEN,UAAUO,OACrEd,EAA2D,QAA3C,EAAAI,EAAQS,cAAc,6BAAqB,eAAEN,UAAUO,OAe3E,OAXAlB,EAAOG,MAAQd,EAA4BW,EAAOG,OAASA,GAC3DH,EAAOO,YAAclB,EAA4BW,EAAOO,aAAkBA,EAAW,IAAIN,GACzFD,EAAO4B,OAAS5B,EAAO4B,QAAU,GACjC5B,EAAO4B,OAAOC,aAAexC,GAAyC,QAAb,EAAAW,EAAO4B,cAAM,eAAEC,eAAgB3B,GAAgB,mCACxGF,EAAO4B,OAAOE,eAAiBzC,EAA4BW,EAAO4B,OAAOE,gBAAkBxB,GAAgB,qDAC3GN,EAAO+B,QAAU/B,EAAO+B,SAAW,GACnC/B,EAAO+B,QAAQ1B,QAAUhB,EAA4BW,EAAO+B,QAAQ1B,SAChEA,GACG,iCACPL,EAAO+B,QAAQC,OAAS3C,EAA4BW,EAAO+B,QAAQC,QAAU5B,GACtE,wBACAJ,KAEJb,I,kHCxFL8C,EAAqC,SACzCC,GAAgB,oCACfC,SAAO,W,uEACK,SAAMC,MAASF,EAAQ,wBAAwBG,MAAK,SAACC,GAChE,OAAAA,EAASC,W,OAKX,OANMC,EAAO,SAMN,CAAP,GAHcC,MAAMC,QAAQF,EAAK,IAAU,MACvCA,EAAK,IAAU,KACf,CAACA,EAAK,IAAU,OAEjBG,QAAO,SAACC,GAAQ,OAAAA,EAAIC,SAAS,uBAC7BjD,KAAI,SAACkD,GAAM,OAAEA,EAAEC,WAAW,QAA+BD,EAAlBZ,EAAQ,IAAIY,cAG3CE,EAAsB,SACjCd,EACAe,GAAoB,uD,2EAEN,SAAMhB,EAAmCC,I,OAAjDgB,EAAQ,SACRC,EAAS,GACN9B,EAAI,E,wBAAGA,EAAI6B,EAAM3B,OACxB,GAAMa,MAAMc,EAAM7B,IAAIgB,MAAK,SAACC,GAC1B,OAAAA,EAASC,OAAOF,MAAK,SAACG,GAAS,OAAAW,EAAOC,KAAKZ,UAFf,M,OAC9B,S,wBADgCnB,I,aAKlC,MAAO,CAAP,EAAO8B,EACJR,QAAO,SAACU,G,MACP,SAAKJ,IAAqC,QAAvB,EAAAI,EAAGC,SAASC,mBAAW,eAAEC,WAK7C5D,KAAI,SAAC6D,GAAY,WAAAC,GAAqBD,eAwB3C,QAf4C,SAAC,G,IAAER,EAAU,aAAEU,EAAM,SACzDC,GAAS,IAAAC,aAWf,OAVA,IAAAC,YAAU,YACK,gD,uEACS,SAAMd,GACxBY,MAAAA,OAAM,EAANA,EAAQG,YAAa,GACrBd,I,cAFIe,EAAc,SAIpBL,EAAOK,G,aAGR,CAACJ,EAAQX,IACL","sources":["webpack://guides/./src/app/procedure-parser.ts","webpack://guides/./src/app/quickstartLoader.tsx"],"sourcesContent":["import {QuickStart, QuickStartTask} from \"@patternfly/quickstarts\";\n\nexport type GuidesQuickStart = QuickStart & {\n    metadata?: {\n        annotations?: {\n            draft?: boolean,\n            order?: number\n        }\n    }\n    spec: {\n        tasks: undefined | QuickStartTask[] | string[]\n    }\n}\n\n\nexport const ProcQuickStartParser = (\n    quickStart: GuidesQuickStart, environmentVariables?: { [name: string]: string }\n) => {\n    const replaceEnvironmentVariables = (s: string | undefined) =>\n        s?.replace(/\\${(\\w+)}/, (substring, name) => {\n            return environmentVariables ? [name]\n                ? environmentVariables[name]\n                : substring : substring;\n        });\n\n    quickStart.spec.tasks = quickStart.spec.tasks?.map((task: QuickStartTask | string, index) => {\n        let proc: string;\n        let answer: QuickStartTask;\n        if (typeof task === \"string\") {\n            proc = task;\n            answer = {};\n        } else {\n            proc = task[\"proc\"]\n            answer = task;\n            delete task[\"proc\"];\n        }\n\n        let procedure, verification, title, summaryFailed, success, reviewFailed: string | undefined;\n        let description = \"\";\n        if (proc) {\n            const taskDOM = document.createElement(\"div\");\n            taskDOM.innerHTML = proc;\n\n            // remove the screencapture images\n            taskDOM.querySelectorAll(\".imageblock.screencapture\").forEach(node => {\n                node.parentElement?.removeChild(node);\n            });\n\n            title = taskDOM.querySelector(\"h1:first-child,h2:first-child,h3:first-child,h4:first-child,h5:first-child\")?.innerHTML.trim();\n            let sectionBody = taskDOM.querySelector(\".sectionbody\");\n            if (!sectionBody?.hasChildNodes()) {\n                // possibly in other templates, where we want to look for article\n                sectionBody = taskDOM.querySelector(\"article\");\n            }\n            if (sectionBody) {\n                for (let i = 0; i < sectionBody.children.length || 0; i++) {\n                    const child = sectionBody.children.item(i);\n                    // find the title\n                    const title = child?.querySelector(\".heading,.title\");\n                    if (title) {\n                        switch (title?.textContent?.trim()) {\n                            case \"Procedure\":\n                                procedure = child?.querySelector(\":not(.heading):not(.title)\")?.outerHTML.trim();\n                                break;\n                            case \"Verification\":\n                                verification = child?.querySelector(\":not(.heading):not(.title)\")?.outerHTML.trim();\n                                break;\n                        }\n                    } else if (!procedure) {\n                        // Otherwise if it comes before a procedure it's part of the description\n                        description += child?.innerHTML.trim();\n                    }\n                }\n            }\n            success = taskDOM.querySelector(\".qs-summary.success\")?.innerHTML.trim();\n            reviewFailed = taskDOM.querySelector(\".qs-review.failed\")?.innerHTML.trim();\n            summaryFailed = taskDOM.querySelector(\".qs-summary.failed\")?.innerHTML.trim();\n        }\n\n\n        answer.title = replaceEnvironmentVariables(answer.title || title)\n        answer.description = replaceEnvironmentVariables(answer.description || `${description} ${procedure}`);\n        answer.review = answer.review || {};\n        answer.review.instructions = replaceEnvironmentVariables(answer.review?.instructions || verification || \"Have you completed these steps?\")\n        answer.review.failedTaskHelp = replaceEnvironmentVariables(answer.review.failedTaskHelp || reviewFailed || \"This task isnâ€™t verified yet. Try the task again.\");\n        answer.summary = answer.summary || {};\n        answer.summary.success = replaceEnvironmentVariables(answer.summary.success ||\n            success\n            || \"You have completed this task!\");\n        answer.summary.failed = replaceEnvironmentVariables(answer.summary.failed || summaryFailed\n            || \"Try the steps again.\");\n        return answer;\n    });\n    return quickStart;\n};\n","import { GuidesQuickStart, ProcQuickStartParser } from \"@app/procedure-parser\";\nimport React, { useState, useEffect, FunctionComponent } from \"react\";\nimport { QuickStart } from \"@patternfly/quickstarts\";\nimport {useAssets} from \"@rhoas/app-services-ui-shared\";\n\nconst loadJSONQuickStartsFilesFromAssets = async (\n  basePath: string\n): Promise<string[]> => {\n  const data = await fetch(`${basePath}/webpack-assets.json`).then((response) =>\n    response.json()\n  );\n  const files = Array.isArray(data[\"\"][\"json\"])\n    ? data[\"\"][\"json\"]\n    : [data[\"\"][\"json\"]];\n  return files\n    .filter((url) => url.endsWith(\".quickstart.json\"))\n    .map((e) => (!e.startsWith(\"http\") ? `${basePath}/${e}` : e));\n};\n\nexport const loadJSONQuickStarts = async (\n  basePath: string,\n  showDrafts?: boolean\n) => {\n  const files = await loadJSONQuickStartsFilesFromAssets(basePath);\n  const result = [] as GuidesQuickStart[];\n  for (let i = 0; i < files.length; i++) {\n    await fetch(files[i]).then((response) =>\n      response.json().then((data) => result.push(data))\n    );\n  }\n  return result\n    .filter((qs) => {\n      if (!showDrafts && qs.metadata.annotations?.draft) {\n        return false;\n      }\n      return true;\n    })\n    .map((content) => ProcQuickStartParser(content));\n};\n\nexport interface QuickStartLoaderProps {\n  children: React.ReactNode;\n  showDrafts?: boolean;\n  onLoad: (quickStarts: QuickStart[]) => {};\n}\n\nconst QuickStartLoader: FunctionComponent = ({ showDrafts, onLoad }) => {\n  const assets = useAssets();\n  useEffect(() => {\n    const load = async () => {\n      const quickstarts = await loadJSONQuickStarts(\n        assets?.getPath() || \"\",\n        showDrafts\n      );\n      onLoad(quickstarts);\n    };\n    load();\n  }, [assets, showDrafts]);\n  return null;\n};\n\nexport default QuickStartLoader;\n"],"names":["ProcQuickStartParser","quickStart","environmentVariables","replaceEnvironmentVariables","s","replace","substring","name","spec","tasks","map","task","index","proc","answer","procedure","verification","title","summaryFailed","success","reviewFailed","description","taskDOM","document","createElement","innerHTML","querySelectorAll","forEach","node","parentElement","removeChild","querySelector","trim","sectionBody","hasChildNodes","i","children","length","child","item","textContent","outerHTML","review","instructions","failedTaskHelp","summary","failed","loadJSONQuickStartsFilesFromAssets","basePath","Promise","fetch","then","response","json","data","Array","isArray","filter","url","endsWith","e","startsWith","loadJSONQuickStarts","showDrafts","files","result","push","qs","metadata","annotations","draft","content","P","onLoad","assets","useAssets","useEffect","getPath","quickstarts"],"sourceRoot":""}