{"apiVersion":"console.openshift.io/v1","kind":"QuickStarts","metadata":{"name":"kafka-bin-scripts","annotations":{"order":4}},"spec":{"version":0.1,"type":{"text":"Quick start","color":"green"},"displayName":"Using Kafka bin scripts with Red Hat OpenShift Streams for Apache Kafka","durationMinutes":10,"icon":"","description":"<div id=\"description\" class=\"paragraph\">\n<p>Learn how to use Kafka bin scripts to interact with a Kafka instance in Red Hat OpenShift Streams for Apache Kafka.</p>\n</div>","prerequisites":["A running Kafka instance (see the Getting Started quick start)","A command-line terminal application","For Windows, the latest version of Oracle JDK"],"introduction":"<div id=\"introduction\" class=\"paragraph\">\n<p>Welcome to the quick start for Red Hat OpenShift Streams for Apache Kafka with Kafka bin scripts. In this quick start, you&#8217;ll learn how to use the Kafka bin scripts to produce and consume messages for your Kafka instances in OpenShift Streams for Apache Kafka.</p>\n</div>","tasks":["<div class=\"sect1\">\n<h2 id=\"proc-downloading-kafka-bin-scripts_using-kafka-bin-scripts\">Downloading the Kafka bin scripts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Kafka bin scripts are the binary scripts that are provided in the <a href=\"https://kafka.apache.org/downloads\" target=\"_blank\" rel=\"noopener\">Apache Kafka distribution</a>. When you extract the Apache Kafka distribution, the <code>bin/</code> directory (or the <code>bin\\windows\\</code> directory if you&#8217;re using Windows) of the distribution contains a set of shell scripts that enable you to interact with your Kafka instance. With the bin scripts, you can produce and consume messages, and perform various operations against the Kafka APIs to administer topics, consumer groups, and other resources.</p>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>In a web browser, go to the Kafka <a href=\"https://kafka.apache.org/downloads\" target=\"_blank\" rel=\"noopener\">Download</a> page and download the latest binary version of Apache Kafka.</p>\n</li>\n<li>\n<p>Extract the downloaded archive and navigate to the <code>bin/</code> directory.</p>\n<div class=\"openblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>This example extracts the archive and then changes to the <code>bin/</code> directory.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Extracting the Kafka archive and navigating to the <code>bin/</code> directory</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>$ tar -xzf kafka_2.13-2.7.0.tgz\n$ cd kafka_2.13-2.7.0/bin</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>bin/</code> directory contains the Kafka bin scripts.</p>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>Review the scripts in the <code>bin/</code> directory and verify that you have the <code>kafka-console-producer</code> and <code>kafka-console-consumer</code> scripts.</p>\n</li>\n<li>\n<p>Check the version number of the <code>kafka-console-producer</code> script to verify that the scripts were downloaded correctly.</p>\n<div class=\"listingblock\">\n<div class=\"title\">Verifying Kafka bin scripts</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>$ ./kafka-console-producer.sh --version\n2.7.0 (Commit:448719dc99a19793)</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Verification</div>\n<ol class=\"arabic\">\n<li>\n<p>Were the Kafka bin scripts installed successfully?</p>\n</li>\n</ol>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-configuring-kafka-bin-scripts_using-kafka-bin-scripts\">Configuring the Kafka bin scripts to connect to a Kafka instance</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To enable the Kafka bin scripts to access a Kafka instance, you must configure the connection using the generated credentials for your OpenShift Streams for Apache Kafka service account. For the Kafka bin scripts, you will create a configuration file that defines these values.</p>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>In your Kafka distribution, navigate to the <code>config/</code> directory.</p>\n</li>\n<li>\n<p>Create a file called <code>app-services.properties</code>.</p>\n</li>\n<li>\n<p>In the <code>app-services.properties</code> file, add the following content to set the Kafka instance client credentials. Replace the values with your own server and credential information.</p>\n<div class=\"openblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>The <code>&lt;client_id&gt;</code> and <code>&lt;client_secret&gt;</code> are the generated credentials for your service account. You copied this information previously for the Kafka instance in OpenShift Streams for Apache Kafka by selecting the options menu (three vertical dots), clicking <strong>View connection information</strong>, and creating the service account.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Setting server and credential values</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>sasl.mechanism=PLAIN\nsecurity.protocol=SASL_SSL\n\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \\\n  username=\"<em>&lt;client_id&gt;</em>\" \\\n  password=\"<em>&lt;client_secret&gt;</em>\";</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nOpenShift Streams for Apache Kafka also supports the SASL/OAUTHBEARER mechanism for authentication, which is the recommended authentication mechanism to use. However, the Kafka bin scripts do not yet fully support OAUTHBEARER, so this example uses SASL/PLAIN.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>Save the file. You will use it in the next task to connect to your Kafka instance and produce messages.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-producing-messages-kafka-bin-scripts_using-kafka-bin-scripts\">Producing messages using Kafka bin scripts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use the <code>kafka-console-producer</code> script to produce messages to Kafka topics.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>The Kafka bin scripts are downloaded.</p>\n</li>\n<li>\n<p>You have a running Kafka instance in OpenShift Streams for Apache Kafka.</p>\n</li>\n<li>\n<p>You have created the <code>app-services.properties</code> file to store your service account credentials.</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>On the command line, from the <code>bin/</code> directory, enter the following command to create a Kafka topic.</p>\n<div class=\"openblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>This example uses the <code>kafka-topics</code> script to create the <code>my-other-topic</code> Kafka topic with the default settings.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>&lt;bootstrap_server&gt;</code> is the bootstrap server endpoint for your service account. You copied this information previously for the Kafka instance in OpenShift Streams for Apache Kafka by selecting the options menu (three vertical dots) and clicking <strong>View connection information</strong>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Using the <code>kafka-topics</code> script to create a Kafka topic</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>$ ./kafka-topics.sh --create --topic my-other-topic --bootstrap-server <em>&lt;bootstrap_server&gt;</em> --command-config ../config/app-services.properties\nCreated topic my-other-topic.</code></pre>\n</div>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>Enter the following command to start the <code>kafka-console-producer</code> script.</p>\n<div class=\"openblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>This example uses the SASL/PLAIN authentication mechanism with the credentials that you saved in the <code>app-services.properties</code> file. This example produces messages to the <code>my-other-topic</code> example topic that you created.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Starting the <code>kafka-console-producer</code> script</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>$ ./kafka-console-producer.sh --topic my-other-topic --bootstrap-server \"<em>&lt;bootstrap_server&gt;</em>\" --producer.config ../config/app-services.properties</code></pre>\n</div>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>With the <code>kafka-console-producer</code> script running, enter messages that you want to produce to the Kafka topic.</p>\n<div class=\"listingblock\">\n<div class=\"title\">Example messages to produce to the Kafka topic</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>&gt;First message\n&gt;Second message\n&gt;Third message</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Keep the producer running to use later when you create a consumer.</p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is the <code>kafka-console-producer</code> script still running without any errors in the terminal?</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-consuming-messages-kafka-bin-scripts_using-kafka-bin-scripts\">Consuming messages using Kafka bin scripts</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use the <code>kafka-console-consumer</code> script to consume messages from Kafka topics. This example consumes the messages that you sent previously with the producer that you created with the <code>kafka-console-producer</code> script.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You used the <code>kafka-console-producer</code> script to produce example messages to a topic.</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>On the command line in a separate terminal from your producer, enter the following command to start the <code>kafka-console-consumer</code> script.</p>\n<div class=\"openblock\">\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>This example uses the SASL/PLAIN authentication mechanism with the credentials that you saved in the <code>app-services.properties</code> file. This example consumes and displays the messages from the <code>my-other-topic</code> example topic.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Starting the <code>kafka-console-consumer</code> script</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code>$ ./kafka-console-consumer.sh -topic my-other-topic --bootstrap-server \"<em>&lt;bootstrap_server&gt;</em>\" --from-beginning --consumer.config ../config/app-services.properties\nFirst message\nSecond message\nThird message</code></pre>\n</div>\n</div>\n</div>\n</div>\n</li>\n<li>\n<p>If your producer is still running in a separate terminal, continue entering messages in the producer terminal and observe the messages being consumed in the consumer terminal.</p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is the <code>kafka-console-consumer</code> script running without any errors in the terminal?</p>\n</li>\n<li>\n<p>Did the <code>kafka-console-consumer</code> script display the messages from the <code>my-other-topic</code> example topic?</p>\n</li>\n</ul>\n</div>\n<div id=\"conclusion\" class=\"paragraph\">\n<p>Congratulations! You successfully completed the OpenShift Streams for Apache Kafka Kafka bin scripts quick start, and are now ready to produce and consume messages in the service.</p>\n</div>\n</div>\n</div>"],"conclusion":"<div id=\"conclusion\" class=\"paragraph\">\n<p>Congratulations! You successfully completed the OpenShift Streams for Apache Kafka Kafka bin scripts quick start, and are now ready to produce and consume messages in the service.</p>\n</div>","nextQuickStart":["kafkacat","quarkus-kafka"]}}