{"apiVersion":"console.openshift.io/v1","kind":"QuickStarts","metadata":{"name":"service-discovery","annotations":{"draft":true,"order":2}},"spec":{"version":0.1,"type":{"text":"Quick start","color":"green"},"displayName":"Connecting Red Hat OpenShift Streams for Apache Kafka Service to your OpenShift cluster","durationMinutes":10,"icon":"","description":"<div id=\"description\" class=\"paragraph\">\n<p>Using the Red Hat OpenShift Streams for Apache Kafka services in your OpenShift clusterRed Hat OpenShift Streams for Apache Kafka.</p>\n</div>","prerequisites":["Access to the RHOAS services","Kubectl or OpenShift CLI installed","Access to the OpenShift Cluster","RHOAS CLI installed - Please follow https://github.com/bf2fc6cc711aee1a0c2a/guides/tree/main/rhoas-cli guide","A command-line terminal application"],"introduction":"<div id=\"introduction\" class=\"paragraph\">\n<p>Welcome to the Red Hat OpenShift Streams for Apache Kafka Service Discovery quick start. In this quick start, you&#8217;ll learn how to connect your OpenShift Streams for Apache Kafka services with <a href=\"https://quarkus.io/\" target=\"_blank\" rel=\"noopener\">Quarkus</a>. Tutorial will connect Kafka with your Application to produce and consume messages from your Kafka instances in OpenShift Streams for Apache Kafka.</p>\n</div>","tasks":["<div class=\"sect1\">\n<h2 id=\"proc-installing-cli_using-servicediscovery\">Installing required cli tools</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RHOAS operator allow you to represent OpenShift Streams for Apache Kafka services as first class citizens in your OpenShift environment.\nThis enables you to work and integrate with these services using standard OpenShift/Kubernetes features and APIs.</p>\n</div>\n<div class=\"paragraph\">\n<p>To connect your OpenShift project to your Red Hat OpenShift Application Services, you can use the RHOAS CLI.\nIn this step we going to install RHOAS and OpenShift cli. You can skip this step entirely if you have those CLI\nalready installed.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You have bash/shell environment that can be used to download and install required tools</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>Install oc command line by following <a href=\"https://docs.openshift.com/container-platform/4.7/cli_reference/openshift_cli/getting-started-cli.html#installing-openshift-cli\">official guide</a></p>\n</li>\n<li>\n<p>Install RHOAS CLI by downloading binaries from the latest release <a href=\"https://github.com/redhat-developer/app-services-cli/releases/latest\" class=\"bare\">https://github.com/redhat-developer/app-services-cli/releases/latest</a></p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Do you see version printed when running <code>oc version</code> command in your terminal</p>\n</li>\n<li>\n<p>Do you see version printed when running <code>rhoas version</code> command in your terminal</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-installing-operator_using-servicediscovery\">Installing the RHOAS Operator in your OpenShift cluster</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The RHOAS Operator creates instances of OpenShift Streams for Apache Kafka services in your cluster.\nOperator connects with OpenShift Streams for Apache Kafka API giving you ability to embed connection details to various services.</p>\n</div>\n<div class=\"paragraph\">\n<p>Operator currently enables developers to connect with their Red Hat OpenShift Streams for Apache Kafka (RHOSAK) instances.\nOperator is used by RHOAS CLI to connect your services with your OpenShift cluster</p>\n</div>\n<div class=\"imageblock diagram\">\n<div class=\"content\">\n<img src=\"rhoas-operator.png\" alt=\"Operator and CLI relationships\">\n</div>\n<div class=\"title\">Figure 1. Operator and CLI relationships</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nRHOAS Operator is already installed on various environments like OpenShift Developer Sandbox: <a href=\"https://developers.redhat.com/developer-sandbox\" class=\"bare\">https://developers.redhat.com/developer-sandbox</a>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nInstallation procedure assumes that you have access to install operators in openshift-namespace on your cluster.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You have login access to OpenShift cluster</p>\n</li>\n<li>\n<p>You have cluster admin rights on OpenShift cluster in order to install Operator</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>Please login to your OpenShift UI instance (if you do not have OpenShift instance you can use <a href=\"https://developers.redhat.com/developer-sandbox\" class=\"bare\">https://developers.redhat.com/developer-sandbox</a> and skip this procedure entirely)</p>\n</li>\n<li>\n<p>Navigate to side menu and select <code>Administrator</code> &gt; <code>Operators</code>&gt; <code>Operator Hub</code></p>\n</li>\n<li>\n<p>Type <code>RHOAS</code> in search tab</p>\n</li>\n<li>\n<p>Select <code>RHOAS</code> tile</p>\n<div class=\"imageblock instruction\">\n<div class=\"content\">\n<img src=\"operator-install.png\" alt=\"Operator\">\n</div>\n<div class=\"title\">Figure 2. Operator tab</div>\n</div>\n</li>\n<li>\n<p>Leave select <code>All namespaces</code> option checked and Press install to install your operator</p>\n</li>\n<li>\n<p>Please wait for operator to install.</p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is RHOAS Operator installation finished successfully</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-inspecting-operator_using-servicediscovery\">Setting up RHOAS CLI to use RHOAS operator</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RHOAS CLI <code>cluster</code> commands provide number of commands that work directly with your own OpenShift cluster.\nTo use cluster command developer needs to have <a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\">kuberentesconfig</a> that can be set using oc or kubectl command.\nThis config contains information about your active cluster and namespace that will be used by RHOAS CLI to perform operations on the cluster</p>\n</div>\n<div class=\"paragraph\">\n<p><code>rhoas cluster status</code> command can be used to verify RHOAS operator installation.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>RHOAS</strong> CLI uses the <strong>oc</strong> CLI to determine the OpenShift instance, and project, that the Streams for Apache Kafka instance should be connected to. Let&#8217;s verify that your <strong>oc</strong> client is properly connected to your OpenShift project.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You have login access to OpenShift cluster</p>\n</li>\n<li>\n<p>You have ability to create new namespace and deploy new applications to your OpenShift cluster</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>Login to your OpenShift cluster using <code>oc login</code> command line tool</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>oc login</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Create new namespace <code>rhoas-quarkus</code> that will be used for this guide</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>oc new-project rhoas-quarkus</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Login to rhoas CLI</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>rhoas login</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>On the command line, enter  <code>rhoas cluster status</code> command and execute check if CLI has proper connection to cluster</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>rhoas cluster status</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is RHOAS Operator installation finished successfully</p>\n</li>\n<li>\n<p>Please inspect output of the command and check if RHOAS Operator is installed.</p>\n</li>\n<li>\n<p>Output from the command contains: \"RHOAS Operator: Installed\"</p>\n</li>\n<li>\n<p>Namespace is <code>rhoas-quarkus</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-connecting-kafka_using-servicediscovery\">Connecting Apache Kafka Service to your cluster</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now we can connect one of our services to our cluster.\n<code>rhoas cluster connect</code> command will let us to connect our Kafka instance to our cluster. If you do not have any Kafka instance you can create new one using <code>rhoas kafka create</code> command.</p>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>Execute</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>rhoas cluster connect --ignore-context</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>You will be asked to select the Kafka instance you want to connect.\nSelect instance and Press <strong>Enter</strong> to continue.</p>\n</li>\n<li>\n<p>The CLI will print the <strong>Connection Details</strong> and asks you to confirm.</p>\n</li>\n<li>\n<p>Verify if namespace that will be used to create service instance is <code>rhoas-quarkus</code></p>\n</li>\n<li>\n<p>Type <code>y</code> and press <strong>Enter</strong> to continue.</p>\n</li>\n<li>\n<p>You will be asked to provide a token, which again can be retrieved from <a href=\"https://cloud.redhat.com/openshift/token\" class=\"bare\">https://cloud.redhat.com/openshift/token</a> . Navigate to this URL, copy the token to your clipboard, and copy it into your terminal. Press <strong>Enter</strong> to continue.</p>\n</li>\n<li>\n<p>You should see the message: <strong>KafkaConnection successfully installed on your cluster.</strong></p>\n</li>\n<li>\n<p>To verify that the connection has been successfully created, execute the following <strong>oc</strong> command: <code>oc get KafkaConnection</code>. This should return a <strong>KafkaConnection</strong> with the name of your Kafka instance.</p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p><code>oc get KafkaConnection</code> returned created kafka instance</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In case of issues you can remove your KafkaConnection by executing\n<code>oc delete akc name-of-your-kafka</code> and retry operation</p>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-create-prices-topic-for-operator_using-servicediscovery\">Creating the prices Kafka topic in OpenShift Streams for Apache Kafka</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>For this quick start, the Kafka topic that the Quarkus example application references is called <code>prices</code>. You need to create this topic in OpenShift Streams for Apache Kafka so that the Quarkus application can interact with it.</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You&#8217;ve created a Kafka instance in OpenShift Streams for Apache Kafka and the instance is in <strong>Ready</strong> state.</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>In the <strong>Streams for Apache Kafka</strong> page of the web console, select the name of the Kafka instance that you want to add a topic to.</p>\n</li>\n<li>\n<p>Click <strong>Create topic</strong> and follow the guided steps to define the topic details. Click <strong>Next</strong> to complete each step and click <strong>Finish</strong> to complete the setup.</p>\n<div class=\"imageblock screencapture\">\n<div class=\"content\">\n<img src=\"sak-create-topic.png\" alt=\"Image of wizard to create a topic\">\n</div>\n<div class=\"title\">Figure 3. Guided steps to define topic details</div>\n</div>\n</li>\n<li>\n<p><strong>Topic name</strong>: Enter <code>prices</code> as the topic name.</p>\n</li>\n<li>\n<p><strong>Partitions</strong>: Set the number of partitions for this topic. This example sets the partition to <code>1</code> for a single partition. Partitions are distinct lists of messages within a topic and enable parts of a topic to be distributed over multiple brokers in the cluster. A topic can contain one or more partitions, enabling producer and consumer loads to be scaled.</p>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nYou can increase the number of partitions later, but you cannot decrease them.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Message retention</strong>: Set the message retention time to the relevant value and increment. This example sets the retention to <code>7 days</code>. Message retention time is the amount of time that messages are retained in a topic before they are deleted or compacted, depending on the cleanup policy.</p>\n<div class=\"paragraph\">\n<p>After you complete the topic setup, the new Kafka topic is listed in the topics table. You can now run the Quarkus application to start producing and consuming messages to and from this topic.</p>\n</div>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Is the new Kafka topic <code>prices</code> listed in the topics table?</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-running-quarkus-example-application-for-operator_using-servicediscovery\">Starting the Quarkus example application</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In this section of the guide we going to deploy Quarkus Example application container image\nThe Quarkus example application in this quick start will connect with Kafka prices topic and generate random numbers between 0 and 100 and produces it to a Kafka topic. Another part of the application consumes the number from the Kafka topic. Applicalition exposes the number as a REST UI (using Server Sent events).</p>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Prerequisites</div>\n<ul>\n<li>\n<p>You&#8217;ve created the <code>prices</code> example Kafka topic.</p>\n</li>\n</ul>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>Execute quarkus application template that will be deployed to your namespace</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>oc apply -f https://raw.githubusercontent.com/redhat-developer/app-services-guides/main/code-examples/quarkus-kafka-quickstart/.kubernetes/kubernetes.yml</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Fetch route to the application by executing</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>oc get route</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Open url from <strong>HOST/PORT</strong> section in your default browser</p>\n</li>\n<li>\n<p>Verify that you see Quarkus landing page</p>\n</li>\n<li>\n<p>If the Quarkus application fails to run, review the error log in the terminal and address any problems. Also review the steps in this quick start to ensure that the Quarkus application and Kafka topic are configured correctly.</p>\n</li>\n<li>\n<p>Append <code>/prices.html</code> to url to see prices section.</p>\n</li>\n<li>\n<p>You should see <code>N/A</code> as price as we still did not connected our application to our Kafka instance</p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Did the Quarkus example application run without any errors?</p>\n</li>\n<li>\n<p>Can you view <code>prices.html</code> page</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","<div class=\"sect1\">\n<h2 id=\"proc-binding-kafka_using-servicediscovery\">Connecting your service with running application</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Once application is running we can now connect our service using <code>rhoas cluster bind</code> command. This command will let us inject credentials to our application as files. Credentials will be by default injected as volume into our kuberentes deployment. Quarkus Kuberentes Client will detect them and automatically configure our application for us.</p>\n</div>\n<div class=\"paragraph\">\n<p>Bind command will create following structure in your pod that many frameworks like quarkus can automatically read and autoconfigure your application to connect with the Kafka and other services.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>/bindings/yourkafka\n├── bootstrapServers\n├── password\n├── provider\n├── saslMechanism\n├── securityProtocol\n├── type\n└── user</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<div class=\"title\">Procedure</div>\n<ol class=\"arabic\">\n<li>\n<p>Execute</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>rhoas cluster bind</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Command will automatically detect our application and single Kafka service in our namespace and inject connection details to the running application.</p>\n</div>\n</li>\n<li>\n<p>Select application we want to connect with.</p>\n</li>\n<li>\n<p>Press enter to select it on the list</p>\n</li>\n<li>\n<p>Verify that command finished with <strong>Binding succeeded</strong> message</p>\n</li>\n<li>\n<p>Please go back to your app <code>prices.html</code> page</p>\n</li>\n<li>\n<p>You should see prices changing on the webpage</p>\n</li>\n</ol>\n</div>\n<div class=\"ulist\">\n<div class=\"title\">Verification</div>\n<ul>\n<li>\n<p>Command should end up with <strong>Binding succeeded</strong></p>\n</li>\n<li>\n<p>Can you view <code>prices.html</code> page and chaging prices</p>\n</li>\n</ul>\n</div>\n<div id=\"conclusion\" class=\"paragraph\">\n<p>Congratulations! You successfully completed the OpenShift Streams for Apache Kafka Service Discovery quick start, and are now ready to deploy and connect services to your own applications with OpenShift Streams for Apache Kafka.</p>\n</div>\n</div>\n</div>"],"conclusion":"<div id=\"conclusion\" class=\"paragraph\">\n<p>Congratulations! You successfully completed the OpenShift Streams for Apache Kafka Service Discovery quick start, and are now ready to deploy and connect services to your own applications with OpenShift Streams for Apache Kafka.</p>\n</div>","nextQuickStart":["kafka-bin-scripts"]}}